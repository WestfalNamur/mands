
# Code generated by sqlc. DO NOT EDIT.
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from db import models


ADD_TODO = """-- name: add_todo \\:one
INSERT INTO todo (
    user_id,
    content_text,
    done
) VALUES (
    :p1, :p2, :p3
) RETURNING id, user_id, content_text, done
"""


DELETE_TODO = """-- name: delete_todo \\:exec
DELETE FROM todo
WHERE id = :p1
"""


GET_ALL_TODO = """-- name: get_all_todo \\:many
SELECT id, user_id, content_text, done FROM todo
"""


GET_TODO = """-- name: get_todo \\:one
SELECT id, user_id, content_text, done FROM todo
WHERE id = :p1
"""


UPDATE_TODO = """-- name: update_todo \\:one
UPDATE todo
SET user_id = :p2,
    content_text = :p3,
    done = :p4
WHERE id = :p1 
RETURNING id, user_id, content_text, done
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def add_todo(self, *, user_id: int, content_text: str, done: bool) -> Optional[models.Todo]:
        row = self._conn.execute(sqlalchemy.text(ADD_TODO), {"p1": user_id, "p2": content_text, "p3": done}).first()
        if row is None:
            return None
        return models.Todo(
            id=row[0],
            user_id=row[1],
            content_text=row[2],
            done=row[3],
        )

    def delete_todo(self, *, id: int) -> None:
        self._conn.execute(sqlalchemy.text(DELETE_TODO), {"p1": id})

    def get_all_todo(self) -> Iterator[models.Todo]:
        result = self._conn.execute(sqlalchemy.text(GET_ALL_TODO))
        for row in result:
            yield models.Todo(
                id=row[0],
                user_id=row[1],
                content_text=row[2],
                done=row[3],
            )

    def get_todo(self, *, id: int) -> Optional[models.Todo]:
        row = self._conn.execute(sqlalchemy.text(GET_TODO), {"p1": id}).first()
        if row is None:
            return None
        return models.Todo(
            id=row[0],
            user_id=row[1],
            content_text=row[2],
            done=row[3],
        )

    def update_todo(self, *, id: int, user_id: int, content_text: str, done: bool) -> Optional[models.Todo]:
        row = self._conn.execute(sqlalchemy.text(UPDATE_TODO), {
            "p1": id,
            "p2": user_id,
            "p3": content_text,
            "p4": done,
        }).first()
        if row is None:
            return None
        return models.Todo(
            id=row[0],
            user_id=row[1],
            content_text=row[2],
            done=row[3],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def add_todo(self, *, user_id: int, content_text: str, done: bool) -> Optional[models.Todo]:
        row = (await self._conn.execute(sqlalchemy.text(ADD_TODO), {"p1": user_id, "p2": content_text, "p3": done})).first()
        if row is None:
            return None
        return models.Todo(
            id=row[0],
            user_id=row[1],
            content_text=row[2],
            done=row[3],
        )

    async def delete_todo(self, *, id: int) -> None:
        await self._conn.execute(sqlalchemy.text(DELETE_TODO), {"p1": id})

    async def get_all_todo(self) -> AsyncIterator[models.Todo]:
        result = await self._conn.stream(sqlalchemy.text(GET_ALL_TODO))
        async for row in result:
            yield models.Todo(
                id=row[0],
                user_id=row[1],
                content_text=row[2],
                done=row[3],
            )

    async def get_todo(self, *, id: int) -> Optional[models.Todo]:
        row = (await self._conn.execute(sqlalchemy.text(GET_TODO), {"p1": id})).first()
        if row is None:
            return None
        return models.Todo(
            id=row[0],
            user_id=row[1],
            content_text=row[2],
            done=row[3],
        )

    async def update_todo(self, *, id: int, user_id: int, content_text: str, done: bool) -> Optional[models.Todo]:
        row = (await self._conn.execute(sqlalchemy.text(UPDATE_TODO), {
            "p1": id,
            "p2": user_id,
            "p3": content_text,
            "p4": done,
        })).first()
        if row is None:
            return None
        return models.Todo(
            id=row[0],
            user_id=row[1],
            content_text=row[2],
            done=row[3],
        )


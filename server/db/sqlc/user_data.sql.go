// Code generated by sqlc. DO NOT EDIT.
// source: user_data.sql

package db

import (
	"context"
)

const addUserData = `-- name: AddUserData :one
INSERT INTO user_data (
    user_name,
    user_password
) VALUES (
    $1, $2
) RETURNING id, user_name, user_password
`

type AddUserDataParams struct {
	UserName     string `json:"user_name"`
	UserPassword string `json:"user_password"`
}

func (q *Queries) AddUserData(ctx context.Context, arg AddUserDataParams) (UserDatum, error) {
	row := q.queryRow(ctx, q.addUserDataStmt, addUserData, arg.UserName, arg.UserPassword)
	var i UserDatum
	err := row.Scan(&i.ID, &i.UserName, &i.UserPassword)
	return i, err
}

const deleteUserData = `-- name: DeleteUserData :exec
DELETE FROM user_data
WHERE id = $1
`

func (q *Queries) DeleteUserData(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserDataStmt, deleteUserData, id)
	return err
}

const getAllUserData = `-- name: GetAllUserData :many
SELECT id, user_name, user_password FROM user_data
`

func (q *Queries) GetAllUserData(ctx context.Context) ([]UserDatum, error) {
	rows, err := q.query(ctx, q.getAllUserDataStmt, getAllUserData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserDatum
	for rows.Next() {
		var i UserDatum
		if err := rows.Scan(&i.ID, &i.UserName, &i.UserPassword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserData = `-- name: UpdateUserData :one
UPDATE user_data
SET user_name = $2,
    user_password = $3
WHERE id = $1 
RETURNING id, user_name, user_password
`

type UpdateUserDataParams struct {
	ID           int64  `json:"id"`
	UserName     string `json:"user_name"`
	UserPassword string `json:"user_password"`
}

func (q *Queries) UpdateUserData(ctx context.Context, arg UpdateUserDataParams) (UserDatum, error) {
	row := q.queryRow(ctx, q.updateUserDataStmt, updateUserData, arg.ID, arg.UserName, arg.UserPassword)
	var i UserDatum
	err := row.Scan(&i.ID, &i.UserName, &i.UserPassword)
	return i, err
}

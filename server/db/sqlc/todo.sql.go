// Code generated by sqlc. DO NOT EDIT.
// source: todo.sql

package db

import (
	"context"
)

const addTodo = `-- name: AddTodo :one
INSERT INTO todo (
    user_id,
    content_text,
    done
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, content_text, done
`

type AddTodoParams struct {
	UserID      int64  `json:"user_id"`
	ContentText string `json:"content_text"`
	Done        bool   `json:"done"`
}

func (q *Queries) AddTodo(ctx context.Context, arg AddTodoParams) (Todo, error) {
	row := q.queryRow(ctx, q.addTodoStmt, addTodo, arg.UserID, arg.ContentText, arg.Done)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ContentText,
		&i.Done,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTodoStmt, deleteTodo, id)
	return err
}

const getAllTodo = `-- name: GetAllTodo :many
SELECT id, user_id, content_text, done FROM todo
`

func (q *Queries) GetAllTodo(ctx context.Context) ([]Todo, error) {
	rows, err := q.query(ctx, q.getAllTodoStmt, getAllTodo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ContentText,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo
SET user_id = $2,
    content_text = $3,
    done = $4
WHERE id = $1 
RETURNING id, user_id, content_text, done
`

type UpdateTodoParams struct {
	ID          int64  `json:"id"`
	UserID      int64  `json:"user_id"`
	ContentText string `json:"content_text"`
	Done        bool   `json:"done"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.queryRow(ctx, q.updateTodoStmt, updateTodo,
		arg.ID,
		arg.UserID,
		arg.ContentText,
		arg.Done,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ContentText,
		&i.Done,
	)
	return i, err
}
